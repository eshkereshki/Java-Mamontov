public class Test {

    //1.1

    public double fraction ( double x){
        return x - (int) x;
    }

    //1.3

    public int charToNum (char x){
        x = (char) (x - 48);
        return x;
    }

    //1.5

    public boolean is2Digits (int x){
        return x >= 10 && x <= 99;
    }

     //1.7

    public boolean isInRange (int a, int b, int num){
         return num >= a && num <= b;
     }

    //1.9

     public boolean isEqual(int a, int b, int c){
        return c == a && c == b;
    }

    // 2.1

    public int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    // 2.3

    public boolean is35 (int x){
        return (x % 3 == 0 || x % 5 == 0) && !(x % 3 == 0 && x % 5 == 0);
    }

    // 2.5

    public int max3 (int x, int y, int z){
        int max = x;
        if (y > max) max = y;
        if (z > max) max = z;
        return max;
    }

    // 2.7

    public int sum2 (int x, int y){
        int sum = x + y;

        if (sum >= 10 && sum <= 19) {
            return 20;
        } else {
            return sum;
        }
    }

    // 2.9

    public String day (int x) {
        switch (x) {
            case 1:
                return "понедельник";
            case 2:
                return "вторник";
            case 3:
                return "среда";
            case 4:
                return "четверг";
            case 5:
                return "пятница";
            case 6:
                return "суббота";
            case 7:
                return "воскресенье";
            default:
                return "это не день недели";
        }
    }

    // 3.1

    public String listNums (int x){

        String result = "";

        for (int i = 0; i <= x; i++) {

            result += i;

            if (i < x) {
                result += " ";
            }
        }
        return result;
    }

    // 3.3

    public String chet (int x){
        StringBuilder result = new StringBuilder();
        for (int i = 0; i <= x; i += 2) {
            result.append(i);
            if (i + 2 <= x) {
                result.append(" ");
            }
        }
        return result.toString();
    }

    // 3.5

    public int numLen (long x){
        if (x == 0) return 1;
        int count = 0;
        long num = Math.abs(x);
        while (num > 0) {
            num = num / 10;
            count++;
        }
        return count;
    }

    // 3.7

    public void square (int x) {
        for (int i = 0; i < x; i++) {
            for (int j = 0; j < x; j++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    // 3.9

    public void rightTriangle (int x){
        for (int i = 1; i <= x; i++) {
            for (int j = 0; j < x - i; j++) {
                System.out.print(" ");
            }
            for (int k = 0; k < i; k++) {
                System.out.print("*");
            }
            System.out.println();
        }
    }

    // 4.1
    public int findFirst (int[] arr, int x){
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x) {
                return i;
            }
        }
        return -1;
    }

    // 4.3

    public int maxAbs (int[] arr){
        if (arr.length == 0) {
            return 0;
        }

        int maxAbsValue = arr[0];
        for (int i = 1; i < arr.length; i++) {
            if (Math.abs(arr[i]) > Math.abs(maxAbsValue)) {
                maxAbsValue = arr[i];
            }
        }
        return maxAbsValue;
    }

   // 4.5

    public int[] add (int[] arr, int[] ins, int pos){
        int[] result = new int[arr.length + ins.length];

        for (int i = 0; i < pos; i++) {
            result[i] = arr[i];
        }

        for (int i = 0; i < ins.length; i++) {
            result[pos + i] = ins[i];
        }

        for (int i = pos; i < arr.length; i++) {
            result[ins.length + i] = arr[i];
        }

        return result;
    }

    // 4.7

    public int[] reverseBack (int[] arr){
        int[] result = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            result[i] = arr[arr.length - 1 - i];
        }
        return result;
    }

    // 4.9

    public int[] findAll (int[] arr, int x){
        int count = 0;
        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x) {
                count++;
            }
        }

        int[] result = new int[count];
        int index = 0;

        for (int i = 0; i < arr.length; i++) {
            if (arr[i] == x) {
                result[index] = i;
                index++;
            }
        }

        return result;
    }

}
